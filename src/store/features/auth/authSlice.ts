import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { GetProfileResponse } from '../../../@types/User';
import { LoginResponse } from '../../../@types/Credentials';

import type { RootState } from '../../store';

// D√©finir les types TypeScript pour l'√©tat utilisateur
type InitialAuthState = {
  user: GetProfileResponse | null;
  accessToken: string | null;
  isAuthenticated: boolean; // Ajout pour indiquer si l'utilisateur est connect√©
};
// Chargement initial du token depuis le localStorage
const tokenFromStorage = localStorage.getItem('token');

// D√©finir l'√©tat initial
const initialState: InitialAuthState = {
  user: null,
  accessToken: null,
  isAuthenticated: Boolean(tokenFromStorage),
};

// Cr√©er le slice utilisateur
const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    // Action pour d√©finir le token et l'√©tat d'authentification lors de la connexion
    setToken: (state, action: PayloadAction<LoginResponse>) => {
      const { accessToken } = action.payload;
      state.accessToken = accessToken;
      state.isAuthenticated = true;
      localStorage.setItem('token', accessToken);
    },

    // Action pour g√©rer la d√©connexion ou la suppression de l'utilisateur
    clearAuth: (state) => {
      state.user = null;
      state.accessToken = null;
      state.isAuthenticated = false;
      localStorage.removeItem('token');
      console.log('üöÄ Utilisateur d√©connect√© user:', state.user);
    },

    // Action pour mettre √† jour les informations utilisateur
    setUser: (state, action: PayloadAction<GetProfileResponse | null>) => {
      state.user = action.payload;
      console.log('üöÄ Utilisateur mis √† jour:', action.payload);
    },
  },
});

// Exporter les actions g√©n√©r√©es
export const { setToken, clearAuth, setUser } = authSlice.actions;

// Selector pour obtenir l'utilisateur actuellement connect√©
export const selectCurrentUser = (state: RootState) => state.auth.user;

// Exporter le reducer pour l'int√©grer dans le store Redux
export default authSlice.reducer;
